---
defaultBaseImageVersion: latest
properties:
- name: DEPLOYMENT_FILE
  value: ${DEPLOYMENT_FILE}
  type: text
stages:
- name: BUILD
  inputs:
  - type: git
    branch: ${GIT_BRANCH}
    service: ${GIT_REPO}
  triggers:
  - type: commit
  properties:
  - name: DOCKER_ROOT
    value: ${DOCKER_ROOT}
    type: text
  - name: DOCKER_FILE
    value: Dockerfile
    type: text  
  jobs:
  - name: Pre-build check
    type: builder
    build_type: cr
    artifact_dir: ''
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_prebuild.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_prebuild.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_prebuild.sh")

      # Lints Dockerfile and checks presence of registry namespace.
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_prebuild.sh")
  - name: Build Docker image
    type: builder
    build_type: cr
    artifact_dir: output
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/build_image.sh) and 'source' it from your pipeline job
      #    source ./scripts/build_image.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/build_image.sh")

      # This script does build a Docker image into IBM Container Service private image registry.
      # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
      # Also copies information into a build.properties file, so they can be reused later on by other scripts (e.g. image url, chart name, ...)
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/build_image.sh")
- name: VALIDATE
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  jobs:
  - name: Vulnerability Advisor
    type: tester
    test_type: vulnerabilityadvisor
    use_image_from_build_input: true
    fail_stage: false
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_vulnerabilities.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_vulnerabilities.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_vulnerabilities.sh")

      # Check for vulnerabilities of built image using Vulnerability Advisor
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_vulnerabilities.sh")
- name: DEPLOY
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text    
  - name: DEPLOYMENT_TEMPLATE
    value: kustomize/deployment.yaml
    type: text
  - name: PATCH_FILE
    value: kustomize/patch.yaml
    type: text
  - name: DEPLOYMENT_FILE
    value: kustomize/deployment.yaml
    type: text
  jobs:
  - name: Pre-deploy check
    type: deployer
    target:
      api_key: ${API_KEY}
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_predeploy.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_predeploy_kubectl.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_predeploy_kubectl.sh")

      # Checks the cluster is ready, has a namespace configured with access to the private
      # image registry (using an IBM Cloud API Key). It also configures Helm Tiller service to later perform a deploy with Helm.
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/check_predeploy_kubectl.sh")
  - name: Compute Canary Name
    type: builder
    curatedDockerImage: latest
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      # Identify canary
      opsys=linux  # or darwin, or windows
      curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest |\
        grep browser_download |\
        grep $opsys |\
        cut -d '"' -f 4 |\
        xargs curl -O -L
      mv kustomize_*_${opsys}_amd64 /usr/local/bin/kustomize
      chmod u+x /usr/local/bin/kustomize

      export DEPLOYMENT_FILE=deploy.yaml
      sed -i -e "s#iter8/reviews:istio-VERSION#$PIPELINE_IMAGE_URL#" ${PATCH_FILE}
      sed -i -e "s#VERSION#${IMAGE_TAG}#g" ${PATCH_FILE}
      cat ${PATCH_FILE}
      kustomize build kustomize -o ${DEPLOYMENT_FILE}
      cat ${DEPLOYMENT_FILE}

      export CANARY_DEPLOYMENT_NAME=$(yq r ${DEPLOYMENT_FILE} metadata.name)
      # Calculate the canary deployment name from the deployment template
      echo "CANARY_DEPLOYMENT_NAME=${CANARY_DEPLOYMENT_NAME}"

      # If already defined build.properties from prior build job, append to it.
      cp build.properties $ARCHIVE_DIR/ || :
      echo "CANARY_DEPLOYMENT_NAME=${CANARY_DEPLOYMENT_NAME}" >> $ARCHIVE_DIR/build.properties
  - name: Deploy to Kubernetes
    type: deployer
    target:
      api_key: ${API_KEY}
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/deploy_kubectl.sh) and 'source' it from your pipeline job
      #    source ./scripts/deploy_kubectl.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/deploy_kubectl.sh")

      opsys=linux  # or darwin, or windows
      curl -s https://api.github.com/repos/kubernetes-sigs/kustomize/releases/latest |\
        grep browser_download |\
        grep $opsys |\
        cut -d '"' -f 4 |\
        xargs curl -O -L
      mv kustomize_*_${opsys}_amd64 /usr/local/bin/kustomize
      chmod u+x /usr/local/bin/kustomize

      export DEPLOYMENT_FILE=deploy.yaml
      sed -i -e "s#iter8/reviews:istio-VERSION#$PIPELINE_IMAGE_URL#" ${PATCH_FILE}
      sed -i -e "s#VERSION#${IMAGE_TAG}#g" ${PATCH_FILE}
      cat ${PATCH_FILE}
      kustomize build kustomize -o ${DEPLOYMENT_FILE}
      cat ${DEPLOYMENT_FILE}

      USE_ISTIO_GATEWAY=true
      source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/deploy_kubectl.sh")
- name: START CANARY EXPERIMENT (VIA ITER8)
  inputs:
  - type: job
    stage: DEPLOY
    job: Compute Canary Name
  triggers:
    - type: stage
      enabled: false
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  - name: EXPERIMENT_TEMPLATE_FILE
    value: iter8/experiment.yaml
    type: text
  jobs:
  - name: Calculate Experiment Name
    type: builder
    build_type: shell
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      # Calculate the experiment name from the experiment template file
      echo "EXPERIMENT_TEMPLATE_FILE=${EXPERIMENT_TEMPLATE_FILE}"
      export EXPERIMENT_NAME=$(yq read ${EXPERIMENT_TEMPLATE_FILE} metadata.name)-${BUILD_NUMBER}
      echo "EXPERIMENT_NAME=${EXPERIMENT_NAME}"

      # Record name in build.properties so can use it to stop the experiment
      # If already defined build.properties from prior build job, append to it.
      cp build.properties $ARCHIVE_DIR/ || :
      echo "EXPERIMENT_NAME=${EXPERIMENT_NAME}" >> $ARCHIVE_DIR/build.properties
  - name: Start Experiment
    type: deployer
    target:
      api_key: ${API_KEY}
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      # Identify baseline
      export BASELINE_DEPLOYMENT_NAME=$(kubectl --namespace ${CLUSTER_NAMESPACE} get deploy --selector=$(kubectl --namespace ${CLUSTER_NAMESPACE} get dr --selector=iter8.tools/role=stable -o json | jq -r '.items[0].spec.subsets[] | select(.name == "stable") | .labels | to_entries[] | "\(.key)=\(.value)"' | paste -sd',' -) -o jsonpath='{.items[0].metadata.name}')
      echo "BASELINE_DEPLOYMENT_NAME=${BASELINE_DEPLOYMENT_NAME}"

      # Run canary experiment using iter8
      BASELINE_VERSION=$BASELINE_DEPLOYMENT_NAME
      echo "BASELINE_VERSION=$BASELINE_VERSION"
      echo "CANARY_DEPLOYMENT_NAME=$CANARY_DEPLOYMENT_NAME"
      source <(curl -sSL "https://raw.githubusercontent.com/kalantar/canary-testing-istio-toolchain/master/scripts/create_experiment.sh")
- name: DELETE CANARY VERSION
  inputs:
  - type: job
    stage: START CANARY EXPERIMENT (VIA ITER8)
    job: Calculate Experiment Name
  triggers:
    - type: stage
      enabled: false
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  jobs:
  - name: Stop Experiment
    type: deployer
    target:
      api_key: ${API_KEY}
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      # Stop iter8 experiment if still in progress
      echo "Stop iter8 experiment if still running"
      kubectl --namespace ${CLUSTER_NAMESPACE} \
        patch experiment ${EXPERIMENT_NAME} \
        --type=json -p '[{"op": "add", "path": "/spec/assessment", "value": "override_success"}]' \
      || true # don't fail when the experiment can't be found
  - name: Delete Deployment
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      echo "Delete canary deployment $DEPLOYMENT_NAME"
      kubectl delete deployment ${CANARY_DEPLOYMENT_NAME} --namespace ${CLUSTER_NAMESPACE}
   